// Guardian Botanical Care (gbc_flutter)
// Copyright (C) 2025 <Cao Turkey>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

import 'dart:io';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../models/plant.dart';
import '../providers/plant_provider.dart';

class IdentificationResultScreen extends StatelessWidget {
  final PlantIdentificationResult result;
  final File imageFile;

  const IdentificationResultScreen({
    super.key,
    required this.result,
    required this.imageFile,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('ËØÜÂà´ÁªìÊûú'),
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // ÂéüÂßãÂõæÂÉè
            Container(
              width: double.infinity,
              height: 250,
              child: Image.file(
                imageFile,
                fit: BoxFit.cover,
              ),
            ),

            Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // ËØÜÂà´ÁªìÊûú
                  _buildSection(
                    'üåø Ê§çÁâ©ËØÜÂà´ÁªìÊûú',
                    [
                      _buildInfoCard([
                        _buildInfoRow('Ê§çÁâ©ÂêçÁß∞', result.species),
                        _buildInfoRow('Â≠¶Âêç', result.scientificName.isNotEmpty ? result.scientificName : 'ÊöÇÊó†Â≠¶Âêç‰ø°ÊÅØ'),
                        _buildInfoRow('ËØÜÂà´ÁΩÆ‰ø°Â∫¶', '${(result.confidence * 100).toStringAsFixed(1)}%'),
                      ]),
                    ],
                  ),

                  const SizedBox(height: 24),

                  // ÂÅ•Â∫∑Áä∂ÂÜµÂàÜÊûê
                  _buildSection(
                    'üîç ÂÅ•Â∫∑Áä∂ÂÜµÂàÜÊûê',
                    [
                      _buildAnalysisCard(_parseHealthAnalysis(result.healthAnalysis)),
                    ],
                  ),

                  const SizedBox(height: 24),

                  // ÂÖªÊä§Âª∫ËÆÆ
                  _buildSection(
                    'üí° ÂÖªÊä§Âª∫ËÆÆ',
                    [
                      _buildCareRecommendationsCard(_parseCareRecommendations(result.careRecommendations)),
                    ],
                  ),

                  const SizedBox(height: 32),

                  // Êìç‰ΩúÊåâÈíÆ
                  Row(
                    children: [
                      Expanded(
                        child: ElevatedButton.icon(
                          onPressed: () => _addToMyPlants(context),
                          icon: const Icon(Icons.add),
                          label: const Text('Ê∑ªÂä†Âà∞ÊàëÁöÑÊ§çÁâ©'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.green,
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(vertical: 16),
                          ),
                        ),
                      ),
                      const SizedBox(width: 16),
                      Expanded(
                        child: OutlinedButton.icon(
                          onPressed: () => _retryIdentification(context),
                          icon: const Icon(Icons.refresh),
                          label: const Text('ÈáçÊñ∞‰∏ä‰º†'),
                          style: OutlinedButton.styleFrom(
                            padding: const EdgeInsets.symmetric(vertical: 16),
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSection(String title, List<Widget> children) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: const TextStyle(
            fontSize: 20,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 12),
        ...children,
      ],
    );
  }

  Widget _buildInfoCard(List<Widget> children) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: children,
        ),
      ),
    );
  }

  Widget _buildTextCard(String content) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Text(
          content,
          style: const TextStyle(
            fontSize: 16,
            height: 1.6,
          ),
        ),
      ),
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 100,
            child: Text(
              label,
              style: TextStyle(
                color: Colors.grey[600],
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(fontSize: 16),
            ),
          ),
        ],
      ),
    );
  }

  void _addToMyPlants(BuildContext context) {
    // ‰ªéÂÖªÊä§Âª∫ËÆÆ‰∏≠ÊèêÂèñÁªìÊûÑÂåñ‰ø°ÊÅØ
    final careAdvice = result.careRecommendations;
    final wateringFrequency = _extractWateringInfo(careAdvice);
    final lightRequirement = _extractLightInfo(careAdvice);
    final fertilizingSchedule = _extractFertilizingInfo(careAdvice);

    // ‰ªéÂÅ•Â∫∑ÂàÜÊûê‰∏≠ÊèêÂèñÂÅ•Â∫∑Áä∂ÊÄÅ
    final healthStatus = _extractHealthStatus(result.healthAnalysis);

    final plant = Plant(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      name: result.species,
      scientificName: result.scientificName,
      imagePath: imageFile.path,
      identificationDate: DateTime.now(),
      healthStatus: healthStatus,
      confidence: result.confidence,
      careInstructions: result.careRecommendations,
      wateringFrequency: wateringFrequency,
      lightRequirement: lightRequirement,
      fertilizingSchedule: fertilizingSchedule,
    );

    context.read<PlantProvider>().addPlant(plant).then((success) {
      if (success) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Â∑≤Ê∑ªÂä†Âà∞ÊàëÁöÑÊ§çÁâ©'),
            backgroundColor: Colors.green,
          ),
        );
        Navigator.of(context).popUntil((route) => route.isFirst);
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Ê∑ªÂä†Â§±Ë¥•ÔºåËØ∑ÈáçËØï'),
            backgroundColor: Colors.red,
          ),
        );
      }
    });
  }

  void _retryIdentification(BuildContext context) {
    Navigator.of(context).pop();
  }

  String _extractWateringInfo(String careAdvice) {
    // ÁÆÄÂçïÁöÑÊñáÊú¨ÊèêÂèñÈÄªËæëÔºåÂèØ‰ª•Ê†πÊçÆÈúÄË¶Å‰ºòÂåñ
    final wateringKeywords = ['ÊµáÊ∞¥', 'Ê∞¥ÂàÜ', 'ÊπøÊ∂¶'];
    final lines = careAdvice.split('\n');

    for (final line in lines) {
      if (wateringKeywords.any((keyword) => line.contains(keyword))) {
        return line.trim();
      }
    }
    return 'Ê†πÊçÆÂúüÂ£§ÊπøÂ∫¶Ë∞ÉÊï¥';
  }

  String _extractLightInfo(String careAdvice) {
    final lightKeywords = ['ÂÖâÁÖß', 'Èò≥ÂÖâ', 'ÁÖßÊòé'];
    final lines = careAdvice.split('\n');

    for (final line in lines) {
      if (lightKeywords.any((keyword) => line.contains(keyword))) {
        return line.trim();
      }
    }
    return 'ÈÄÇ‰∏≠ÂÖâÁÖß';
  }

  String _extractFertilizingInfo(String careAdvice) {
    final fertilizingKeywords = ['ÊñΩËÇ•', 'ËÇ•Êñô', 'Ëê•ÂÖª'];
    final lines = careAdvice.split('\n');

    for (final line in lines) {
      if (fertilizingKeywords.any((keyword) => line.contains(keyword))) {
        return line.trim();
      }
    }
    return 'Êò•Â§èÂ≠£ÊØèÊúà‰∏ÄÊ¨°';
  }

  String _extractHealthStatus(String healthAnalysis) {
    // ÂÖàËß£ÊûêJSONÊ†ºÂºèÁöÑÂÅ•Â∫∑ÂàÜÊûêÂÜÖÂÆπ
    String parsedContent = _parseHealthAnalysis(healthAnalysis);

    // Ë∞ÉËØïËæìÂá∫
    print('ÂéüÂßãÂÅ•Â∫∑ÂàÜÊûêÂÜÖÂÆπ: $healthAnalysis');
    print('Ëß£ÊûêÂêéÁöÑÂÜÖÂÆπ: $parsedContent');

    // È¶ñÂÖàÊ£ÄÊü•ÊòéÁ°ÆÁöÑ‰∏çÂÅ•Â∫∑Áä∂ÊÄÅ - ‰ΩøÁî®Êõ¥Á≤æÁ°ÆÁöÑËØçÊ±áÈÅøÂÖçËØØÂà§
    final unhealthyKeywords = ['‰∏çÂÅ•Â∫∑', 'ÁóÖÂÆ≥', 'Ëô´ÂÆ≥', 'ÊûØËêé', 'ÁóÖËô´ÂÆ≥', 'ÊÇ£ÁóÖ', 'ËêéËî´', 'ËÖêÁÉÇ', 'ÊñëÁÇπ', 'Ëô´ËõÄ', 'ÁóÖÂèò', 'ÊÑüÊüì', 'Âè∂ÁâáÂèëÈªÑ', 'ÈªÑÂåñÁóÖ', 'ÊûØÈªÑ'];
    // ÁÑ∂ÂêéÊ£ÄÊü•ÂÅ•Â∫∑Áä∂ÊÄÅ - ‰ΩøÁî®Êõ¥Á≤æÁ°ÆÁöÑÂåπÈÖç
    final healthyKeywords = ['ÂÅ•Â∫∑ËâØÂ•Ω', 'ÁîüÈïøÊó∫Áõõ', 'Áä∂ÊÄÅËâØÂ•Ω', 'È≤úÁªø', 'ËåÅÂ£Æ', 'Ê≠£Â∏∏ÁîüÈïø', 'ÈïøÂäøËâØÂ•Ω', 'Ë°®ÊòéÂÅ•Â∫∑', 'ÊòæÁ§∫ÂÅ•Â∫∑', 'ÁúãËµ∑Êù•ÂÅ•Â∫∑', 'ÂÅ•Â∫∑Áä∂ÂÜµ', 'ËâØÂ•ΩÁöÑÁîüÈïø', 'ÊòæÁ§∫Âá∫ËâØÂ•Ω'];
    // ÊúÄÂêéÊ£ÄÊü•‰∏ÄËà¨Áä∂ÊÄÅ
    final normalKeywords = ['‰∏ÄËà¨', 'ÊôÆÈÄö', 'Â∞öÂèØ', '‰∏≠Á≠â'];

    String result;

    // ‰ºòÂÖàÊ£ÄÊü•ÊòéÁ°ÆÁöÑ‰∏çÂÅ•Â∫∑ÂÖ≥ÈîÆËØç
    if (unhealthyKeywords.any((keyword) => parsedContent.contains(keyword))) {
      result = '‰∏çÂÅ•Â∫∑';
      print('ÂåπÈÖçÂà∞‰∏çÂÅ•Â∫∑ÂÖ≥ÈîÆËØç');
    }
    // Ê£ÄÊü•ÂÅ•Â∫∑ÂÖ≥ÈîÆËØç
    else if (healthyKeywords.any((keyword) => parsedContent.contains(keyword))) {
      result = 'ÂÅ•Â∫∑';
      print('ÂåπÈÖçÂà∞ÂÅ•Â∫∑ÂÖ≥ÈîÆËØç');
    }
    // ÁâπÊÆäÂ§ÑÁêÜÔºöÂ¶ÇÊûúÂåÖÂê´"ÂÅ•Â∫∑"‰ΩÜ‰∏çÂåÖÂê´ÊòéÁ°ÆÁöÑ‰∏çÂÅ•Â∫∑ËØçÊ±á
    else if (parsedContent.contains('ÂÅ•Â∫∑') && !unhealthyKeywords.any((keyword) => parsedContent.contains(keyword))) {
      result = 'ÂÅ•Â∫∑';
      print('ÂåÖÂê´ÂÅ•Â∫∑‰ΩÜÊó†‰∏çÂÅ•Â∫∑ÂÖ≥ÈîÆËØç');
    }
    // Ê£ÄÊü•‰∏ÄËà¨Áä∂ÊÄÅÂÖ≥ÈîÆËØç
    else if (normalKeywords.any((keyword) => parsedContent.contains(keyword))) {
      result = '‰∏ÄËà¨';
      print('ÂåπÈÖçÂà∞‰∏ÄËà¨ÂÖ≥ÈîÆËØç');
    }
    // Â¶ÇÊûúÈÉΩÊ≤°ÊúâÂåπÈÖçÂà∞ÔºåÈªòËÆ§ËøîÂõûÂÅ•Â∫∑ÔºàÁßØÊûÅÂà§Êñ≠Ôºâ
    else {
      result = 'ÂÅ•Â∫∑';
      print('ÈªòËÆ§Âà§Êñ≠‰∏∫ÂÅ•Â∫∑');
    }

    print('ÊúÄÁªàÂÅ•Â∫∑Áä∂ÊÄÅÂà§Êñ≠ÁªìÊûú: $result');
    return result;
  }

  /// Ëß£ÊûêÂÅ•Â∫∑ÂàÜÊûêÂÜÖÂÆπ
  String _parseHealthAnalysis(String content) {
    try {
      // È¶ñÂÖàÊ£ÄÊü•ÊòØÂê¶ÊòØMapÊ†ºÂºèÁöÑÂ≠óÁ¨¶‰∏≤
      if (content.startsWith('{') && content.endsWith('}')) {
        // Â∞ùËØïÂ∞ÜMapÊ†ºÂºèÂ≠óÁ¨¶‰∏≤ËΩ¨Êç¢‰∏∫JSONÂπ∂Ëß£Êûê
        String jsonString = content
            .replaceAllMapped(RegExp(r'(\w+):'), (match) => '"${match.group(1)}":')  // ÁªôkeyÂä†ÂºïÂè∑
            .replaceAllMapped(RegExp(r': ([^,}]+)'), (match) => ': "${match.group(1)}"');  // ÁªôvalueÂä†ÂºïÂè∑

        try {
          final jsonData = jsonDecode(jsonString);
          return _formatHealthAnalysisFromMap(jsonData);
        } catch (e) {
          // Â¶ÇÊûúJSONËΩ¨Êç¢Â§±Ë¥•ÔºåÊâãÂä®Ëß£ÊûêMapÊ†ºÂºè
          return _parseMapFormatContent(content);
        }
      }

      // Â∞ùËØïËß£ÊûêÊ†áÂáÜJSONÊ†ºÂºèÁöÑÂìçÂ∫î
      final jsonMatch = RegExp(r'\{[\s\S]*\}').firstMatch(content);
      if (jsonMatch != null) {
        final jsonData = jsonDecode(jsonMatch.group(0)!);
        return _formatHealthAnalysisFromMap(jsonData);
      }
    } catch (e) {
      // JSONËß£ÊûêÂ§±Ë¥•ÔºåËøîÂõûÂéüÂßãÂÜÖÂÆπ
      print('JSONËß£ÊûêÂ§±Ë¥•: $e');
    }

    // Â¶ÇÊûú‰∏çÊòØJSONÊ†ºÂºèÊàñËß£ÊûêÂ§±Ë¥•ÔºåËøîÂõûÂéüÂßãÂÜÖÂÆπ
    return content;
  }

  /// Ê†ºÂºèÂåñ‰ªéMapËß£ÊûêÂá∫ÁöÑÂÅ•Â∫∑ÂàÜÊûêÂÜÖÂÆπ
  String _formatHealthAnalysisFromMap(Map<String, dynamic> jsonData) {
    StringBuffer result = StringBuffer();

    // Â¶ÇÊûúÊúâhealth_analysisÂ≠óÊÆµÔºåÁõ¥Êé•ËøîÂõû
    if (jsonData['health_analysis'] != null) {
      return jsonData['health_analysis'];
    }

    // Â¶ÇÊûúÊòØÂè∂ÁâáÁä∂ÂÜµÂíåÁîüÈïøÁä∂ÊÄÅÁöÑÊ†ºÂºè
    if (jsonData['leaf_condition'] != null || jsonData['growth_status'] != null) {
      if (jsonData['leaf_condition'] != null) {
        result.write('Âè∂ÁâáÁä∂ÂÜµÔºö${jsonData['leaf_condition']}');
      }
      if (jsonData['growth_status'] != null) {
        if (result.isNotEmpty) result.write('\n\n');
        result.write('ÁîüÈïøÁä∂ÊÄÅÔºö${jsonData['growth_status']}');
      }
      return result.toString();
    }

    // Â§ÑÁêÜÂÖ∂‰ªñÂèØËÉΩÁöÑJSONÂ≠óÊÆµ
    for (var entry in jsonData.entries) {
      if (result.isNotEmpty) result.write('\n\n');
      String key = _translateKey(entry.key);
      result.write('$keyÔºö${entry.value}');
    }

    return result.toString();
  }

  /// ÊâãÂä®Ëß£ÊûêMapÊ†ºÂºèÁöÑÂÜÖÂÆπ
  String _parseMapFormatContent(String content) {
    StringBuffer result = StringBuffer();

    // ÁßªÈô§ÂºÄÂ§¥ÂíåÁªìÂ∞æÁöÑÂ§ßÊã¨Âè∑
    String cleanContent = content.substring(1, content.length - 1);

    // ÊåâÈÄóÂè∑ÂàÜÂâ≤ÈîÆÂÄºÂØπ
    List<String> pairs = [];
    int braceCount = 0;
    int start = 0;

    for (int i = 0; i < cleanContent.length; i++) {
      if (cleanContent[i] == '{') braceCount++;
      if (cleanContent[i] == '}') braceCount--;
      if (cleanContent[i] == ',' && braceCount == 0) {
        pairs.add(cleanContent.substring(start, i).trim());
        start = i + 1;
      }
    }
    pairs.add(cleanContent.substring(start).trim());

    // Ëß£ÊûêÊØè‰∏™ÈîÆÂÄºÂØπ
    for (String pair in pairs) {
      int colonIndex = pair.indexOf(':');
      if (colonIndex > 0) {
        String key = pair.substring(0, colonIndex).trim();
        String value = pair.substring(colonIndex + 1).trim();

        String translatedKey = _translateKey(key);
        if (result.isNotEmpty) result.write('\n\n');
        result.write('$translatedKeyÔºö$value');
      }
    }

    return result.toString();
  }

  /// ÁøªËØëJSONÂ≠óÊÆµÂêç‰∏∫‰∏≠Êñá
  String _translateKey(String key) {
    switch (key.toLowerCase()) {
      case 'leaf_condition':
        return 'Âè∂ÁâáÁä∂ÂÜµ';
      case 'growth_status':
        return 'ÁîüÈïøÁä∂ÊÄÅ';
      case 'health_status':
        return 'ÂÅ•Â∫∑Áä∂ÊÄÅ';
      case 'overall_health':
        return 'Êï¥‰ΩìÂÅ•Â∫∑';
      case 'disease_signs':
        return 'ÁóÖÂÆ≥ÂæÅË±°';
      case 'pest_signs':
        return 'Ëô´ÂÆ≥ÂæÅË±°';
      case 'recommendations':
        return 'Âª∫ËÆÆ';
      default:
        return key;
    }
  }

  /// Ëß£ÊûêÂÖªÊä§Âª∫ËÆÆÂÜÖÂÆπ
  Map<String, dynamic> _parseCareRecommendations(String content) {
    try {
      // È¶ñÂÖàÂ∞ùËØïÁõ¥Êé•Ëß£ÊûêÔºåÂõ†‰∏∫‰ªéVLM APIËøîÂõûÁöÑÂèØËÉΩÂ∑≤ÁªèÊòØJSONÂ≠óÁ¨¶‰∏≤
      Map<String, dynamic> jsonData;

      try {
        // Â∞ùËØïÁõ¥Êé•Ëß£ÊûêJSONÂ≠óÁ¨¶‰∏≤
        jsonData = jsonDecode(content);
      } catch (e) {
        // Â¶ÇÊûúÁõ¥Êé•Ëß£ÊûêÂ§±Ë¥•ÔºåÂ∞ùËØï‰ªéÊñáÊú¨‰∏≠ÊèêÂèñJSON
        final jsonMatch = RegExp(r'\{[\s\S]*\}').firstMatch(content);
        if (jsonMatch != null) {
          jsonData = jsonDecode(jsonMatch.group(0)!);
        } else {
          // Â¶ÇÊûúÈÉΩÂ§±Ë¥•‰∫ÜÔºåËøîÂõûÂéüÂßãÂÜÖÂÆπ
          return {'general': content};
        }
      }

      // Â¶ÇÊûúËß£ÊûêÊàêÂäüÔºåËøîÂõûËß£ÊûêÂêéÁöÑÊï∞ÊçÆ
      if (jsonData is Map<String, dynamic>) {
        return jsonData;
      } else {
        return {'general': content};
      }
    } catch (e) {
      // JSONËß£ÊûêÂ§±Ë¥•ÔºåËøîÂõûÂéüÂßãÂÜÖÂÆπ
      return {'general': content};
    }
  }

  /// ÊûÑÂª∫ÂÅ•Â∫∑ÂàÜÊûêÂç°Áâá
  Widget _buildAnalysisCard(String analysis) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  Icons.health_and_safety,
                  color: Colors.green[600],
                  size: 20,
                ),
                const SizedBox(width: 8),
                Text(
                  'ÂÅ•Â∫∑Áä∂ÊÄÅËØÑ‰º∞',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: Colors.green[700],
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            Text(
              analysis,
              style: const TextStyle(
                fontSize: 15,
                height: 1.6,
                color: Colors.black87,
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// ÊûÑÂª∫ÂÖªÊä§Âª∫ËÆÆÂç°Áâá
  Widget _buildCareRecommendationsCard(Map<String, dynamic> recommendations) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  Icons.eco,
                  color: Colors.blue[600],
                  size: 20,
                ),
                const SizedBox(width: 8),
                Text(
                  'ÂÖªÊä§ÊåáÂçó',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: Colors.blue[700],
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            ...recommendations.entries.map((entry) => _buildCareItem(entry.key, entry.value.toString())),
          ],
        ),
      ),
    );
  }

  /// ÊûÑÂª∫Âçï‰∏™ÂÖªÊä§Âª∫ËÆÆÈ°π
  Widget _buildCareItem(String category, String advice) {
    IconData icon;
    Color color;
    String title;

    switch (category.toLowerCase()) {
      case 'lighting':
      case 'light':
        icon = Icons.wb_sunny;
        color = Colors.orange;
        title = 'ÂÖâÁÖßÈúÄÊ±Ç';
        break;
      case 'watering':
      case 'water':
        icon = Icons.water_drop;
        color = Colors.blue;
        title = 'ÊµáÊ∞¥ÊåáÂØº';
        break;
      case 'temperature':
      case 'temp':
        icon = Icons.thermostat;
        color = Colors.red;
        title = 'Ê∏©Â∫¶Ë¶ÅÊ±Ç';
        break;
      case 'humidity':
        icon = Icons.opacity;
        color = Colors.cyan;
        title = 'ÊπøÂ∫¶ÁéØÂ¢É';
        break;
      case 'fertilization':
      case 'fertilizer':
        icon = Icons.grass;
        color = Colors.green;
        title = 'ÊñΩËÇ•Âª∫ËÆÆ';
        break;
      case 'pruning':
        icon = Icons.content_cut;
        color = Colors.purple;
        title = '‰øÆÂâ™Êä§ÁêÜ';
        break;
      default:
        icon = Icons.info;
        color = Colors.grey;
        title = 'ÂÖªÊä§Âª∫ËÆÆ';
    }

    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            padding: const EdgeInsets.all(6),
            decoration: BoxDecoration(
              color: color.withOpacity(0.1),
              borderRadius: BorderRadius.circular(6),
            ),
            child: Icon(
              icon,
              size: 16,
              color: color,
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.w600,
                    color: color,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  advice,
                  style: const TextStyle(
                    fontSize: 14,
                    height: 1.5,
                    color: Colors.black87,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
